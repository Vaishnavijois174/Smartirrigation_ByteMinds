#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WiFiClientSecure.h>

const char *ssid = "your-SSID";
const char *password = "your-PASSWORD";

// Replace with your OpenWeatherMap API key
const char *apiKey = "your-OPENWEATHERMAP-API-KEY";

const char *server = "api.openweathermap.org";
const String apiEndpoint = "/data/2.5/weather?q=cityname,countrycode&appid=" + String(apiKey);

ESP8266WebServer server(80);

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Define server routes
  server.on("/", HTTP_GET, handleRoot);

  // Start the server
  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  Serial.println("Client connected");

  // Create a TCP/IP client to connect to OpenWeatherMap
  WiFiClientSecure client;

  if (client.connect(server, 443)) {
    Serial.println("Connected to OpenWeatherMap");

    // Make an HTTPS request
    client.print(String("GET ") + apiEndpoint + " HTTP/1.1\r\n" +
                 "Host: " + server + "\r\n" +
                 "Connection: close\r\n\r\n");

    // Wait for the response
    while (!client.available()) {
      delay(10);
    }

    // Read the response
    String response = "";
    while (client.available()) {
      char c = client.read();
      response += c;
    }

    // Respond to the client with the weather data
    server.send(200, "text/plain", response);

    // Print the response to the serial monitor
    Serial.println(response);
  } else {
    Serial.println("Connection to OpenWeatherMap failed");
    server.send(500, "text/plain", "Internal Server Error");
  }

  // Close the connection
  client.stop();
  Serial.println("Client disconnected");
}
